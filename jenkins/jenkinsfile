pipeline {
   agent any
    environment {
        JAVA_HOME = "/usr/lib/jvm/java-11-openjdk-11.0.11.0.9-0.el8_3.x86_64"
        MAVEN_HOME = "/opt/maven"
        PATH = "$PATH:$MAVEN_HOME/bin"
        SCANNER_HOME = tool 'SonarQubeScanner'
        GIT_URL = "http://gitlab-external-ip/root/elveslibraryapp.git"
        REPO_URL = "http://nexus-exernal-ip:8083"
        IMAGE = "nexus-external-ip:8083/umtakcn/elveslibraryapp:0.${BUILD_NUMBER}"
        
    }
    stages {
        stage('SCM') {
            steps {
                git credentialsId: 'gitlab', branch: 'master', url: "${GIT_URL}"
            }
        }
        stage('Build') {
            steps {
                dir("${WORKSPACE}/app") {
                    sh 'mvn clean package'
                    sh 'mv ${WORKSPACE}/app/target/elveslibraryapp.war ${WORKSPACE}'
                }
            }
        }
        stage('Sonarqube') {
            steps {
                dir("${WORKSPACE}/app") {
                    withSonarQubeEnv('sonarqube') {
                        sh "${SCANNER_HOME}/bin/sonar-scanner"    
                    }
                }
            }
        }
        stage('Quality Gate') {
            steps {
                timeout (time: 10, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            } 
        }
        stage('Dockerize') {
            steps {
                script {
                    dir("${WORKSPACE}") {
                        newImage = docker.build("umtakcn/elveslibraryapp")
                        docker.withRegistry("${REPO_URL}", 'nexus') {
                            newImage.push("0.${BUILD_NUMBER}")
                        }  
                    }
                }
            }
        }
        stage('Version') {
            steps {
                script {
                    dir("${WORKSPACE}/kubernetes") {
                        def deployment = readYaml file: "rollout.yaml"
                        deployment.spec.template.spec.containers[0].image = "${IMAGE}"
                        sh "rm -rf rollout.yaml"
                        writeYaml file: "rollout.yaml", data: deployment
                    }
                }
            }
        }
        stage('Push') {
            steps {
                dir("${WORKSPACE}/kubernetes") {
                    sh 'git commit rollout.yaml -m update'
                    withCredentials([usernamePassword(credentialsId: 'gitlab', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                        sh 'git config --local credential.helper "!f() { echo username=\\$GIT_USERNAME; echo password=\\$GIT_PASSWORD; }; f"'
                        sh 'git push origin master'
                    }
                }
            }
        }
    }
    post { 
        always { 
            cleanWs()
        }
    }
}
